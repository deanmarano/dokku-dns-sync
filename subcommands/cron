#!/usr/bin/env bash
source "$(dirname "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)")/config"
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x

# Load dokku functions if available
if [[ -f "$PLUGIN_CORE_AVAILABLE_PATH/common/functions" ]]; then
  source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
fi

# Define missing functions if needed
if ! declare -f dokku_log_info1 >/dev/null 2>&1; then
  dokku_log_info1() { echo "-----> $*"; }
fi

if ! declare -f dokku_log_info2 >/dev/null 2>&1; then
  dokku_log_info2() { echo "=====> $*"; }
fi

if ! declare -f dokku_log_warn >/dev/null 2>&1; then
  dokku_log_warn() { echo " !     $*"; }
fi

if ! declare -f dokku_log_fail >/dev/null 2>&1; then
  dokku_log_fail() { echo " !     $*" >&2; exit 1; }
fi

source "$(dirname "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)")/functions"

validate_cron_schedule() {
  local schedule="$1"
  
  # Basic validation: check if it has 5 fields separated by spaces
  local field_count
  field_count=$(echo "$schedule" | wc -w)
  
  if [[ $field_count -ne 5 ]]; then
    dokku_log_fail "Invalid cron schedule: '$schedule'. Must have 5 fields (minute hour day month weekday)"
  fi
  
  # Extract fields
  local minute hour day month weekday
  read -r minute hour day month weekday <<< "$schedule"
  
  # Validate each field (basic checks)
  validate_cron_field "$minute" "0-59" "minute" "*,0-59"
  validate_cron_field "$hour" "0-23" "hour" "*,0-23"
  validate_cron_field "$day" "1-31" "day" "*,1-31"
  validate_cron_field "$month" "1-12" "month" "*,1-12"
  validate_cron_field "$weekday" "0-7" "weekday" "*,0-7"
}

validate_cron_field() {
  local field="$1"
  local range="$2"
  local field_name="$3"
  local valid_pattern="$4"
  
  # Allow wildcards, numbers, ranges, and lists
  if [[ "$field" =~ ^[\*0-9,/-]+$ ]]; then
    return 0
  else
    dokku_log_fail "Invalid $field_name field: '$field'. Must match pattern: $valid_pattern"
  fi
}

service-cron-cmd() {
  #E manage automated DNS synchronization cron job
  #E dokku $PLUGIN_COMMAND_PREFIX:cron [--enable|--disable] [--schedule "CRON_SCHEDULE"]
  #E without flags: displays current cron job status, schedule, last run time,
  #E and recent log entries from automated DNS synchronization.
  #E --enable: creates a system cron job that runs dns:sync-all daily at 2:00 AM (default)
  #E --disable: removes the cron job while preserving logs and metadata
  #E --schedule: specify custom cron schedule (e.g., "0 4 * * *" for 4 AM daily)
  #F --enable, enable automated DNS synchronization via cron
  #F --disable, disable automated DNS synchronization cron job
  #F --schedule, specify custom cron schedule when enabling (e.g., "0 4 * * *")
  declare desc="manage automated DNS synchronization cron job"
  local cmd="$PLUGIN_COMMAND_PREFIX:cron" argv=("$@")
  
  # Handle Dokku command routing - first argument will be the command name
  if [[ "$1" == "$cmd" ]]; then
    shift 1
  fi
  
  # Parse arguments
  local enable_cron=false
  local disable_cron=false
  local custom_schedule=""
  
  while [[ $# -gt 0 ]]; do
    case $1 in
      --enable)
        enable_cron=true
        shift
        ;;
      --disable)
        disable_cron=true
        shift
        ;;
      --schedule)
        if [[ -z "$2" ]]; then
          dokku_log_fail "--schedule requires a cron schedule argument (e.g., \"0 4 * * *\")"
        fi
        custom_schedule="$2"
        shift 2
        ;;
      *)
        dokku_log_fail "Unknown option: $1. Use --enable, --disable, --schedule, or no flags for status."
        ;;
    esac
  done
  
  # Validate flag combinations
  if [[ "$enable_cron" == "true" && "$disable_cron" == "true" ]]; then
    dokku_log_fail "Cannot use both --enable and --disable flags together."
  fi
  
  if [[ -n "$custom_schedule" && "$enable_cron" == "false" ]]; then
    dokku_log_fail "--schedule can only be used with --enable"
  fi
  
  # Execute actions
  if [[ "$enable_cron" == "true" ]]; then
    cron_enable_functionality "$custom_schedule"
    return $?
  elif [[ "$disable_cron" == "true" ]]; then
    cron_disable_functionality
    return $?
  fi
  
  # Default: show status (original functionality)
  
  local CRON_DATA_DIR="$PLUGIN_DATA_ROOT/cron"
  
  echo
  dokku_log_info2 "DNS Cron Status"
  
  # Check if cron job exists in system crontab
  local cron_job_active=false
  local current_job=""
  if crontab -l 2>/dev/null | grep -q "dokku dns:sync-all"; then
    cron_job_active=true
    current_job=$(crontab -l 2>/dev/null | grep "dokku dns:sync-all" | head -1)
  fi
  
  # Check metadata status
  local status="unknown"
  local schedule="N/A"
  local command="N/A"
  local log_file="N/A"
  local enabled_at="N/A"
  local disabled_at="N/A"
  
  if [[ -d "$CRON_DATA_DIR" ]]; then
    [[ -f "$CRON_DATA_DIR/status" ]] && status=$(cat "$CRON_DATA_DIR/status")
    [[ -f "$CRON_DATA_DIR/schedule" ]] && schedule=$(cat "$CRON_DATA_DIR/schedule")
    [[ -f "$CRON_DATA_DIR/command" ]] && command=$(cat "$CRON_DATA_DIR/command")
    [[ -f "$CRON_DATA_DIR/log_file" ]] && log_file=$(cat "$CRON_DATA_DIR/log_file")
    [[ -f "$CRON_DATA_DIR/enabled_at" ]] && enabled_at=$(cat "$CRON_DATA_DIR/enabled_at")
    [[ -f "$CRON_DATA_DIR/disabled_at" ]] && disabled_at=$(cat "$CRON_DATA_DIR/disabled_at")
  fi
  
  # Display status
  if [[ "$cron_job_active" == "true" ]]; then
    dokku_log_info1 "Status: ✅ ENABLED"
    dokku_log_info1 "Active Job: $current_job"
  else
    dokku_log_info1 "Status: ❌ DISABLED"
  fi
  
  # Display configuration
  echo
  dokku_log_info2 "Configuration"
  if [[ "$schedule" == "0 2 * * *" ]]; then
    dokku_log_info1 "Schedule: $schedule (Daily at 2:00 AM - default)"
  else
    dokku_log_info1 "Schedule: $schedule (custom)"
  fi
  dokku_log_info1 "Command: $command"
  dokku_log_info1 "Log File: $log_file"
  
  # Display timestamps
  echo
  dokku_log_info2 "History"
  if [[ "$enabled_at" != "N/A" ]]; then
    dokku_log_info1 "Enabled At: $enabled_at"
  fi
  if [[ "$disabled_at" != "N/A" ]]; then
    dokku_log_info1 "Disabled At: $disabled_at"
  fi
  
  # Display log file information and recent entries
  echo
  dokku_log_info2 "Log Information"
  
  if [[ -f "$log_file" && "$log_file" != "N/A" ]]; then
    local log_size
    log_size=$(wc -l < "$log_file" 2>/dev/null | xargs || echo "0")
    local log_modified
    log_modified=$(stat -c %y "$log_file" 2>/dev/null || echo "Unknown")
    
    dokku_log_info1 "Log Entries: $log_size lines"
    dokku_log_info1 "Last Modified: $log_modified"
    
    echo
    dokku_log_info2 "Recent Log Entries (last 10 lines)"
    if [[ -s "$log_file" ]]; then
      tail -n 10 "$log_file" | while IFS= read -r line; do
        echo "  $line"
      done
    else
      dokku_log_info1 "  (No log entries yet)"
    fi
  else
    dokku_log_info1 "Log File: Not found or not configured"
  fi
  
  # Display management commands
  echo
  dokku_log_info2 "Management Commands"
  if [[ "$cron_job_active" == "true" ]]; then
    dokku_log_info1 "• Disable cron: dokku $PLUGIN_COMMAND_PREFIX:cron --disable"
    dokku_log_info1 "• Manual sync: dokku $PLUGIN_COMMAND_PREFIX:sync-all"
  else
    dokku_log_info1 "• Enable cron: dokku $PLUGIN_COMMAND_PREFIX:cron --enable"
    dokku_log_info1 "• Manual sync: dokku $PLUGIN_COMMAND_PREFIX:sync-all"
  fi
}

cron_enable_functionality() {
  local custom_schedule="$1"
  local CRON_DATA_DIR="$PLUGIN_DATA_ROOT/cron"
  local CRON_SCHEDULE="${custom_schedule:-0 2 * * *}"  # Default to daily at 2 AM
  local CRON_COMMAND="dokku dns:sync-all"
  local CRON_LOG_FILE="$CRON_DATA_DIR/sync.log"
  local CRON_JOB_COMMENT="# Dokku DNS auto-sync"
  local CRON_ENTRY="$CRON_SCHEDULE $CRON_COMMAND >> $CRON_LOG_FILE 2>&1 $CRON_JOB_COMMENT"
  
  # Validate custom schedule if provided
  if [[ -n "$custom_schedule" ]]; then
    validate_cron_schedule "$custom_schedule"
  fi
  
  # Check if DNS provider is configured
  local PROVIDER_FILE="$PLUGIN_DATA_ROOT/PROVIDER"
  if [[ ! -f "$PROVIDER_FILE" ]]; then
    dokku_log_fail "No DNS provider configured. Run: dokku $PLUGIN_COMMAND_PREFIX:configure [provider]"
  fi
  
  # Create cron data directory
  mkdir -p "$CRON_DATA_DIR"
  
  # Check if cron job already exists and remove it
  if crontab -l 2>/dev/null | grep -q "dokku dns:sync-all"; then
    local existing_job
    existing_job=$(crontab -l 2>/dev/null | grep "dokku dns:sync-all" || echo "")
    dokku_log_info1 "Updating existing DNS cron job..."
    dokku_log_info2 "Previous: $existing_job"
    
    # Remove existing cron job
    (crontab -l 2>/dev/null || echo "") | (grep -v "dokku dns:sync-all" || true) | crontab -
  fi
  
  # Create the cron job
  dokku_log_info1 "Creating DNS sync cron job..."
  if [[ "$CRON_SCHEDULE" == "0 2 * * *" ]]; then
    dokku_log_info2 "Schedule: $CRON_SCHEDULE (Daily at 2:00 AM - default)"
  else
    dokku_log_info2 "Schedule: $CRON_SCHEDULE (custom)"
  fi
  dokku_log_info2 "Command: $CRON_COMMAND"
  dokku_log_info2 "Log file: $CRON_LOG_FILE"
  
  # Add cron job to crontab
  (crontab -l 2>/dev/null || echo "") | { cat; echo "$CRON_ENTRY"; } | crontab -
  
  if crontab -l 2>/dev/null | grep -q "dokku dns:sync-all"; then
    # Store cron job metadata
    echo "enabled" > "$CRON_DATA_DIR/status"
    echo "$CRON_SCHEDULE" > "$CRON_DATA_DIR/schedule"
    echo "$CRON_COMMAND" > "$CRON_DATA_DIR/command"
    echo "$CRON_LOG_FILE" > "$CRON_DATA_DIR/log_file"
    date +%Y-%m-%d\ %H:%M:%S > "$CRON_DATA_DIR/enabled_at"
    
    # Initialize log file
    echo "$(date): DNS cron job enabled" > "$CRON_LOG_FILE"
    
    dokku_log_info1 "✅ DNS cron job enabled successfully!"
    echo
    dokku_log_info2 "Automated DNS synchronization is now active"
    if [[ "$CRON_SCHEDULE" == "0 2 * * *" ]]; then
      dokku_log_info1 "• Schedule: $CRON_SCHEDULE (Daily at 2:00 AM - default)"
    else
      dokku_log_info1 "• Schedule: $CRON_SCHEDULE (custom)"
    fi
    dokku_log_info1 "• Command: $CRON_COMMAND"
    dokku_log_info1 "• Log file: $CRON_LOG_FILE"
    dokku_log_info1 "• Check status: dokku $PLUGIN_COMMAND_PREFIX:cron"
    dokku_log_info1 "• Disable: dokku $PLUGIN_COMMAND_PREFIX:cron --disable"
  else
    dokku_log_fail "Failed to create DNS cron job. Check system permissions."
  fi
}

cron_disable_functionality() {
  local CRON_DATA_DIR="$PLUGIN_DATA_ROOT/cron"
  
  # Check if cron job exists
  if ! crontab -l 2>/dev/null | grep -q "dokku dns:sync-all"; then
    dokku_log_fail "No DNS cron job found. Enable with: dokku $PLUGIN_COMMAND_PREFIX:cron --enable"
  fi
  
  dokku_log_info1 "Disabling DNS sync cron job..."
  
  # Show current job before removing
  local current_job
  current_job=$(crontab -l 2>/dev/null | grep "dokku dns:sync-all" || echo "")
  if [[ -n "$current_job" ]]; then
    dokku_log_info2 "Removing job: $current_job"
  fi
  
  # Remove the cron job from crontab
  # Handle case where crontab might be empty or fail, and grep -v returns 1 when filtering out all lines
  (crontab -l 2>/dev/null || echo "") | (grep -v "dokku dns:sync-all" || true) | crontab -
  
  # Verify removal
  if crontab -l 2>/dev/null | grep -q "dokku dns:sync-all"; then
    dokku_log_fail "Failed to remove DNS cron job. Check system permissions."
  fi
  
  # Update status metadata
  if [[ -d "$CRON_DATA_DIR" ]]; then
    echo "disabled" > "$CRON_DATA_DIR/status"
    date +%Y-%m-%d\ %H:%M:%S > "$CRON_DATA_DIR/disabled_at"
    
    # Add log entry about disabling
    local CRON_LOG_FILE
    if [[ -f "$CRON_DATA_DIR/log_file" ]]; then
      CRON_LOG_FILE=$(cat "$CRON_DATA_DIR/log_file")
      echo "$(date): DNS cron job disabled" >> "$CRON_LOG_FILE"
    fi
  fi
  
  dokku_log_info1 "✅ DNS cron job disabled successfully!"
  echo
  dokku_log_info2 "Automated DNS synchronization is now inactive"
  dokku_log_info1 "• Cron job removed from system crontab"
  dokku_log_info1 "• Logs and metadata preserved for reference"
  dokku_log_info1 "• Check status: dokku $PLUGIN_COMMAND_PREFIX:cron"
  dokku_log_info1 "• Re-enable: dokku $PLUGIN_COMMAND_PREFIX:cron --enable"
}

service-cron-cmd "$@"