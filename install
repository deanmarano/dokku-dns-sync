#!/usr/bin/env bash
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/config"
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x

# Load dokku functions if available
if [[ -f "$PLUGIN_CORE_AVAILABLE_PATH/common/functions" ]]; then
  source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
fi

# Define property functions if not available
if ! declare -f fn-plugin-property-setup >/dev/null 2>&1; then
  fn-plugin-property-setup() {
    local PLUGIN_PREFIX="$1"
    # Simple property setup - create directories
    mkdir -p "$PLUGIN_DATA_ROOT" 2>/dev/null || true
    return 0
  }
fi

detect_and_configure_provider() {
  local PROVIDER_FILE="$PLUGIN_DATA_ROOT/PROVIDER"
  local DETECTED_PROVIDERS=()
  local CONFIGURED_PROVIDER=""
  
  # Ensure the data directory exists
  mkdir -p "$PLUGIN_DATA_ROOT" 2>/dev/null || true
  
  # Check for AWS CLI
  if command -v aws >/dev/null 2>&1; then
    DETECTED_PROVIDERS+=("aws")
    
    if aws sts get-caller-identity >/dev/null 2>&1; then
      # Test Route53 access
      if aws route53 list-hosted-zones >/dev/null 2>&1; then
        local ZONE_COUNT=$(aws route53 list-hosted-zones --query 'length(HostedZones)' --output text 2>/dev/null || echo "0")
        echo "       ✓ AWS CLI authenticated with Route53 access ($ZONE_COUNT hosted zones)"
        CONFIGURED_PROVIDER="aws"
      else
        echo "       ⚠ AWS CLI authenticated but Route53 access limited (check permissions)"
      fi
    else
      echo "       ⚠ AWS CLI installed but not configured (run: aws configure)"
    fi
  else
    echo "       - AWS CLI not installed"
  fi
  
  # Check for Cloudflare CLI (flarectl)
  if command -v flarectl >/dev/null 2>&1; then
    echo "       ✓ Cloudflare CLI (flarectl) detected"
    echo "       → Cloudflare support available (requires API token configuration)"
    DETECTED_PROVIDERS+=("cloudflare")
  else
    echo "       - Cloudflare CLI not installed"
  fi
  
  # Set default provider based on detection
  if [[ -n "$CONFIGURED_PROVIDER" ]]; then
    echo "       → Setting $CONFIGURED_PROVIDER as default DNS provider (fully configured)"
    echo "$CONFIGURED_PROVIDER" > "$PROVIDER_FILE" 2>/dev/null || true
    return 0
  elif [[ ${#DETECTED_PROVIDERS[@]} -eq 1 ]]; then
    echo "       → Setting ${DETECTED_PROVIDERS[0]} as default DNS provider"
    echo "${DETECTED_PROVIDERS[0]}" > "$PROVIDER_FILE" 2>/dev/null || true
    return 0  # Configuration is complete, provider just needs credentials
  elif [[ ${#DETECTED_PROVIDERS[@]} -gt 1 ]]; then
    echo "       → Multiple providers detected: ${DETECTED_PROVIDERS[*]}"
    echo "       → Setting aws as default (use dokku $PLUGIN_COMMAND_PREFIX:configure to change)"
    echo "aws" > "$PROVIDER_FILE" 2>/dev/null || true
    return 0
  else
    echo "       → No DNS provider CLI tools detected"
    echo "       → Setting aws as default provider"
    echo "aws" > "$PROVIDER_FILE" 2>/dev/null || true
    return 0
  fi
}

plugin-install() {
  echo "-----> Installing $PLUGIN_SERVICE plugin"
  
  # Set up plugin properties
  fn-plugin-property-setup "$PLUGIN_COMMAND_PREFIX"

  # Create service data directory
  mkdir -p "$PLUGIN_DATA_ROOT" || echo "Failed to create $PLUGIN_SERVICE data directory"
  chown "${DOKKU_SYSTEM_USER:-dokku}:${DOKKU_SYSTEM_GROUP:-dokku}" "$PLUGIN_DATA_ROOT" 2>/dev/null || true

  # Create service config directory if defined
  if [[ -n "$PLUGIN_CONFIG_ROOT" ]]; then
    mkdir -p "$PLUGIN_CONFIG_ROOT" || echo "Failed to create $PLUGIN_SERVICE config directory"
    chown "${DOKKU_SYSTEM_USER:-dokku}:${DOKKU_SYSTEM_GROUP:-dokku}" "$PLUGIN_CONFIG_ROOT" 2>/dev/null || true
  fi

  # Auto-detect and configure DNS provider
  echo "-----> Auto-detecting DNS provider capabilities..."
  local PROVIDER_FILE="$PLUGIN_DATA_ROOT/PROVIDER"
  if detect_and_configure_provider 2>&1; then
    echo "-----> $PLUGIN_SERVICE plugin installed and configured successfully"
  else
    echo "-----> $PLUGIN_SERVICE plugin installed successfully"
  fi
  
  echo ""
  echo "Next steps:"
  echo "  1. Configure DNS provider:     dokku $PLUGIN_COMMAND_PREFIX:configure [aws|cloudflare]"
  echo "  2. Set up credentials:         dokku $PLUGIN_COMMAND_PREFIX:verify"
  echo "  3. Add app domains:            dokku $PLUGIN_COMMAND_PREFIX:add <app>"
  echo "  4. Sync DNS records:           dokku $PLUGIN_COMMAND_PREFIX:sync <app>"
  echo ""
  
  # Show the help output directly
  dokku "$PLUGIN_COMMAND_PREFIX:help" 2>/dev/null || echo "Run 'dokku $PLUGIN_COMMAND_PREFIX:help' to see all available commands"
}

plugin-install "$@"
