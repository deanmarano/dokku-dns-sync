#!/usr/bin/env bash
# Pre-commit hook for dokku-dns plugin
# Runs linting and optionally Docker tests before allowing commits

set -euo pipefail

echo "🔍 Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    local level="$1"
    shift
    local message="$*"
    
    case "$level" in
        "INFO")
            echo -e "${BLUE}[INFO]${NC} $message"
            ;;
        "SUCCESS")
            echo -e "${GREEN}[SUCCESS]${NC} $message"
            ;;
        "WARNING")
            echo -e "${YELLOW}[WARNING]${NC} $message"
            ;;
        "ERROR")
            echo -e "${RED}[ERROR]${NC} $message"
            ;;
    esac
}

# Function to run linting
run_lint() {
    log "INFO" "Running shellcheck linting..."
    if make lint 2>/dev/null; then
        log "SUCCESS" "Linting passed"
        return 0
    else
        log "ERROR" "Linting failed"
        return 1
    fi
}

# Function to check README generation
run_readme_check() {
    log "INFO" "Checking README generation..."
    
    # Generate README and check if there are changes
    make generate >/dev/null 2>&1
    
    if git diff --quiet README.md; then
        log "SUCCESS" "README is up-to-date"
        return 0
    else
        log "ERROR" "README needs to be regenerated"
        echo ""
        echo "The following changes were found in README.md after running 'make generate':"
        git --no-pager diff README.md
        echo ""
        echo "Please run 'make generate' and commit the updated README.md"
        return 1
    fi
}

# Function to check and manage Docker state
check_docker_state() {
    local docker_was_running=false
    
    # Check if Docker daemon is running
    if docker info >/dev/null 2>&1; then
        docker_was_running=true
        log "INFO" "Docker is already running"
    else
        log "INFO" "Docker is not running, attempting to start..."
        
        # Try to start Docker (this varies by platform)
        if command -v open >/dev/null 2>&1 && [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS - start Docker Desktop
            open -a Docker 2>/dev/null || true
        elif command -v systemctl >/dev/null 2>&1; then
            # Linux with systemd
            sudo systemctl start docker 2>/dev/null || true
        fi
        
        # Wait for Docker to start (up to 30 seconds)
        local timeout=30
        local count=0
        while ! docker info >/dev/null 2>&1 && [[ $count -lt $timeout ]]; do
            sleep 1
            ((count++))
        done
        
        if docker info >/dev/null 2>&1; then
            log "SUCCESS" "Docker started successfully"
        else
            log "ERROR" "Failed to start Docker after ${timeout} seconds"
            return 1
        fi
    fi
    
    # Store the initial state for restoration
    echo "$docker_was_running"
}

# Function to restore Docker state
restore_docker_state() {
    local docker_was_running="$1"
    
    if [[ "$docker_was_running" == "false" ]]; then
        log "INFO" "Restoring Docker state (stopping Docker)..."
        
        if command -v osascript >/dev/null 2>&1 && [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS - quit Docker Desktop
            osascript -e 'quit app "Docker"' 2>/dev/null || true
        elif command -v systemctl >/dev/null 2>&1; then
            # Linux with systemd
            sudo systemctl stop docker 2>/dev/null || true
        fi
        
        log "INFO" "Docker state restored"
    fi
}

# Function to run Docker integration tests (fast)
run_docker_integration_tests_fast() {
    log "INFO" "Running Docker integration tests..."
    
    # Check if test containers are running, start them if not
    local containers_running=false
    if docker-compose -f tests/docker/docker-compose.yml ps | grep -q "Up"; then
        containers_running=true
        log "INFO" "Test containers already running"
    else
        log "INFO" "Starting test containers..."
        if docker-compose -f tests/docker/docker-compose.yml up -d >/dev/null 2>&1; then
            log "INFO" "Test containers started"
            # Wait a moment for containers to be ready
            sleep 2
        else
            log "ERROR" "Failed to start test containers"
            return 1
        fi
    fi
    
    # Run the tests
    if make docker-test 2>/dev/null; then
        log "SUCCESS" "Docker integration tests passed"
        
        # Clean up containers if we started them
        if [[ "$containers_running" == "false" ]]; then
            log "INFO" "Cleaning up test containers..."
            docker-compose -f tests/docker/docker-compose.yml down >/dev/null 2>&1 || true
        fi
        
        return 0
    else
        log "ERROR" "Docker integration tests failed"
        
        # Clean up containers if we started them
        if [[ "$containers_running" == "false" ]]; then
            log "INFO" "Cleaning up test containers..."
            docker-compose -f tests/docker/docker-compose.yml down >/dev/null 2>&1 || true
        fi
        
        return 1
    fi
}

# Function to run full Docker integration tests (slow)
run_docker_integration_tests_full() {
    log "INFO" "Running full Docker integration tests..."
    if scripts/test-docker.sh --build 2>/dev/null; then
        log "SUCCESS" "Full Docker integration tests passed"
        return 0
    else
        log "ERROR" "Full Docker integration tests failed"
        return 1
    fi
}

# Check if we should skip tests (set SKIP_TESTS=1 to skip)
if [[ "${SKIP_TESTS:-}" == "1" ]]; then
    log "WARNING" "Skipping tests (SKIP_TESTS=1)"
    exit 0
fi

# Check if this is a documentation-only change
if git diff --cached --name-only | grep -qv -E '\.(md|txt|rst)$'; then
    CODE_CHANGES=true
else
    CODE_CHANGES=false
fi

# Always run linting for code changes
if [[ "$CODE_CHANGES" == "true" ]]; then
    if ! run_lint; then
        log "ERROR" "Pre-commit failed due to linting errors"
        echo ""
        echo "To fix linting issues, run: make lint"
        echo "To skip this check temporarily: SKIP_TESTS=1 git commit"
        exit 1
    fi
else
    log "INFO" "Documentation-only change detected, skipping linting"
fi

# Check README generation for any changes (including documentation changes)
if ! run_readme_check; then
    log "ERROR" "Pre-commit failed due to README generation issues"
    echo ""
    echo "To fix this: make generate && git add README.md"
    echo "To skip this check temporarily: SKIP_TESTS=1 git commit"
    exit 1
fi

# Check if Docker is available and user wants Docker tests
if command -v docker >/dev/null 2>&1 && [[ "$CODE_CHANGES" == "true" ]]; then
    # Check and manage Docker state
    DOCKER_WAS_RUNNING=$(check_docker_state)
    DOCKER_STATE_EXIT_CODE=$?
    
    if [[ $DOCKER_STATE_EXIT_CODE -ne 0 ]]; then
        log "ERROR" "Failed to start Docker"
        exit 1
    fi
    
    # Set up trap to restore Docker state on exit
    trap 'restore_docker_state "$DOCKER_WAS_RUNNING"' EXIT
    
    # Default to fast integration tests, allow full integration tests with RUN_FULL_TESTS=1
    if [[ "${RUN_FULL_TESTS:-}" == "1" ]]; then
        log "INFO" "Running full Docker integration tests (RUN_FULL_TESTS=1)..."
        if ! run_docker_integration_tests_full; then
            log "ERROR" "Pre-commit failed due to full integration test failures"
            echo ""
            echo "To skip full tests: unset RUN_FULL_TESTS"
            echo "To skip all tests: SKIP_TESTS=1 git commit"
            exit 1
        fi
    elif [[ "${RUN_DOCKER_TESTS:-1}" == "1" ]]; then
        log "INFO" "Running Docker integration tests..."
        if ! run_docker_integration_tests_fast; then
            log "ERROR" "Pre-commit failed due to integration test failures"
            echo ""
            echo "To skip Docker tests: RUN_DOCKER_TESTS=0 git commit"
            echo "To skip all tests: SKIP_TESTS=1 git commit"
            exit 1
        fi
    fi
elif [[ "$CODE_CHANGES" == "true" ]]; then
    log "WARNING" "Docker not available, skipping Docker tests"
fi

log "SUCCESS" "All pre-commit checks passed!"
echo ""
echo "💡 Tips:"
echo "   • Unit tests run by default (fast)"
echo "   • README generation is checked automatically"
echo "   • For full integration tests: RUN_FULL_TESTS=1 git commit"
echo "   • To skip Docker tests: RUN_DOCKER_TESTS=0 git commit"
echo "   • To skip all tests: SKIP_TESTS=1 git commit"
echo "   • Manual testing:"
echo "     - make lint                    # Linting only"
echo "     - make generate                # Update README"
echo "     - make docker-test            # Integration tests (fast)"
echo "     - scripts/test-docker.sh --build    # Full integration tests"