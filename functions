#!/usr/bin/env bash
# DNS Plugin Functions
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/config"
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x

# Load dokku functions if available
if [[ -f "$PLUGIN_CORE_AVAILABLE_PATH/common/functions" ]]; then
  source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
fi

# Define missing functions if needed
if ! declare -f dokku_log_info1 >/dev/null 2>&1; then
  dokku_log_info1() { echo "-----> $*"; }
fi

if ! declare -f dokku_log_info2 >/dev/null 2>&1; then
  dokku_log_info2() { echo "=====> $*"; }
fi

if ! declare -f dokku_log_warn >/dev/null 2>&1; then
  dokku_log_warn() { echo " !     $*"; }
fi

if ! declare -f dokku_log_fail >/dev/null 2>&1; then
  dokku_log_fail() { echo " !     $*" >&2; exit 1; }
fi

# DNS-specific functions

get_app_domains() {
  local APP="$1"
  local domains_output
  domains_output=$(dokku domains:report "$APP" --domains-app-vhosts 2>/dev/null || echo "")
  
  # Convert space-separated domains to newline-separated for proper array processing
  if [[ -n "$domains_output" ]]; then
    for domain in $domains_output; do
      echo "$domain"
    done
  fi
}

get_dns_managed_apps() {
  local LINKS_FILE="$PLUGIN_DATA_ROOT/LINKS"
  
  if [[ -f "$LINKS_FILE" ]]; then
    cat "$LINKS_FILE" 2>/dev/null || echo ""
  fi
}

is_app_dns_managed() {
  local APP="$1"
  local LINKS_FILE="$PLUGIN_DATA_ROOT/LINKS"
  
  if [[ -f "$LINKS_FILE" ]] && grep -q "^$APP$" "$LINKS_FILE" 2>/dev/null; then
    return 0
  else
    return 1
  fi
}

dns_configure_global() {
  local PROVIDER="$1"
  local GLOBAL_CONFIG_ROOT="$PLUGIN_DATA_ROOT"
  local PROVIDER_FILE="$GLOBAL_CONFIG_ROOT/PROVIDER"
  
  # Validate provider
  case "$PROVIDER" in
    aws|cloudflare)
      ;;
    *)
      dokku_log_fail "Invalid provider '$PROVIDER'. Supported providers: aws, cloudflare"
      ;;
  esac
  
  # Create data directory if it doesn't exist
  mkdir -p "$GLOBAL_CONFIG_ROOT"
  
  # Set the provider
  echo "$PROVIDER" > "$PROVIDER_FILE"
  
  dokku_log_info2 "DNS configured globally with provider: $PROVIDER"
  dokku_log_info1 "Next step: dokku $PLUGIN_COMMAND_PREFIX:verify"
}

dns_get_server_ip() {
  # Try to get the server's public IP using multiple methods
  local SERVER_IP
  
  # First try to use global domains to resolve server IP
  local GLOBAL_DOMAINS
  GLOBAL_DOMAINS=$(dokku domains:report --domains-global-vhosts 2>/dev/null || echo "")
  
  if [[ -n "$GLOBAL_DOMAINS" ]]; then
    # Use the first global domain to resolve server IP
    local FIRST_GLOBAL_DOMAIN
    FIRST_GLOBAL_DOMAIN=$(echo "$GLOBAL_DOMAINS" | head -n1)
    SERVER_IP=$(dig +short "$FIRST_GLOBAL_DOMAIN" | tail -n1 2>/dev/null || echo "")
  fi
  
  # If no global domains or couldn't resolve, try to get server IP another way
  if [[ -z "$SERVER_IP" ]]; then
    # Try to get the server's public IP
    SERVER_IP=$(curl -s --max-time 3 ifconfig.me 2>/dev/null || curl -s --max-time 3 ipecho.net/plain 2>/dev/null || curl -s --max-time 3 icanhazip.com 2>/dev/null || echo "")
  fi
  
  if [[ -z "$SERVER_IP" ]]; then
    dokku_log_fail "Could not determine server IP. Please ensure your server has internet access or configure global domains."
  fi
  
  echo "$SERVER_IP"
}

dns_app() {
  local APP="$1"
  local GLOBAL_CONFIG_ROOT="$PLUGIN_DATA_ROOT"
  local PROVIDER_FILE="$GLOBAL_CONFIG_ROOT/PROVIDER"
  
  if [[ ! -f "$PROVIDER_FILE" ]]; then
    dokku_log_fail "No DNS provider configured. Run: dokku $PLUGIN_COMMAND_PREFIX:configure <provider>"
  fi
  
  local PROVIDER
  PROVIDER="$(cat "$PROVIDER_FILE")"
  
  if [[ -z "$PROVIDER" ]]; then
    dokku_log_fail "DNS provider not set. Run: dokku $PLUGIN_COMMAND_PREFIX:configure <provider>"
  fi
  
  # Load the provider functions
  local PROVIDER_SCRIPT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/providers/$PROVIDER"
  if [[ ! -f "$PROVIDER_SCRIPT" ]]; then
    dokku_log_fail "Provider '$PROVIDER' not found. Available providers: aws, cloudflare"
  fi
  source "$PROVIDER_SCRIPT"
  
  # Call the provider-specific sync function
  if declare -f "dns_provider_${PROVIDER}_sync_app" >/dev/null 2>&1; then
    "dns_provider_${PROVIDER}_sync_app" "$APP"
  else
    dokku_log_fail "Provider '$PROVIDER' does not support sync operations"
  fi
}

dns_add_app_domains() {
  local APP="$1"
  shift
  local DOMAINS=("$@")
  
  # If no domains specified, get all domains for the app
  if [[ ${#DOMAINS[@]} -eq 0 ]]; then
    local APP_DOMAINS
    APP_DOMAINS=$(dokku domains:report "$APP" --domains-app-vhosts 2>/dev/null || echo "")
    
    if [[ -z "$APP_DOMAINS" ]]; then
      dokku_log_warn "No domains configured for app: $APP"
      dokku_log_info1 "Add domains with: dokku domains:add $APP <domain>"
      return 0
    fi
    
    # Convert space-separated domains to array
    read -ra DOMAINS <<< "$APP_DOMAINS"
  fi
  
  if [[ ${#DOMAINS[@]} -eq 0 ]]; then
    dokku_log_warn "No domains to add for app: $APP"
    return 0
  fi
  
  # Check if DNS provider is configured
  local GLOBAL_CONFIG_ROOT="$PLUGIN_DATA_ROOT"
  local PROVIDER_FILE="$GLOBAL_CONFIG_ROOT/PROVIDER"
  local PROVIDER="None"
  
  if [[ -f "$PROVIDER_FILE" ]]; then
    PROVIDER="$(cat "$PROVIDER_FILE")"
  fi
  
  # Check which domains are already added to DNS for this app
  local APP_DOMAINS_FILE="$PLUGIN_DATA_ROOT/$APP/DOMAINS"
  local ALREADY_ADDED_DOMAINS=()
  local NEW_DOMAINS=()
  
  # Get list of already added domains for this app
  if [[ -f "$APP_DOMAINS_FILE" ]]; then
    while IFS= read -r domain; do
      [[ -n "$domain" ]] && ALREADY_ADDED_DOMAINS+=("$domain")
    done < "$APP_DOMAINS_FILE"
  fi
  
  # Separate already-added domains from new domains
  for DOMAIN in "${DOMAINS[@]}"; do
    [[ -z "$DOMAIN" ]] && continue
    
    local IS_ALREADY_ADDED=false
    for ADDED_DOMAIN in "${ALREADY_ADDED_DOMAINS[@]}"; do
      if [[ "$DOMAIN" == "$ADDED_DOMAIN" ]]; then
        IS_ALREADY_ADDED=true
        break
      fi
    done
    
    if [[ "$IS_ALREADY_ADDED" == true ]]; then
      # Domain is already added, don't process it again
      continue
    else
      NEW_DOMAINS+=("$DOMAIN")
    fi
  done
  
  # Show status of already-added domains
  if [[ ${#ALREADY_ADDED_DOMAINS[@]} -gt 0 ]]; then
    dokku_log_info1 "Already added domains for app '$APP':"
    for DOMAIN in "${ALREADY_ADDED_DOMAINS[@]}"; do
      # Only show if it's in the current request
      local SHOW_DOMAIN=false
      for REQUESTED_DOMAIN in "${DOMAINS[@]}"; do
        if [[ "$DOMAIN" == "$REQUESTED_DOMAIN" ]]; then
          SHOW_DOMAIN=true
          break
        fi
      done
      
      if [[ "$SHOW_DOMAIN" == true ]]; then
        dokku_log_info1 "  ✓ $DOMAIN (already in DNS management)"
      fi
    done
    echo
  fi
  
  # If no new domains to add, show message and exit
  if [[ ${#NEW_DOMAINS[@]} -eq 0 ]]; then
    if [[ ${#ALREADY_ADDED_DOMAINS[@]} -gt 0 ]]; then
      dokku_log_info1 "All requested domains are already added to DNS management"
    else
      dokku_log_warn "No domains to add for app: $APP"
    fi
    return 0
  fi
  
  dokku_log_info1 "Processing ${#NEW_DOMAINS[@]} new domain(s) for app '$APP':"
  for domain in "${NEW_DOMAINS[@]}"; do
    dokku_log_info1 "  • $domain"
  done
  echo
  
  # Filter new domains to only include those with hosted zones
  local VALID_DOMAINS=()
  local SKIPPED_DOMAINS=()
  
  dokku_log_info1 "Filtering domains - Provider: $PROVIDER, New domains: ${#NEW_DOMAINS[@]}"
  
  if [[ "$PROVIDER" == "aws" ]]; then
    # Load AWS provider functions to check hosted zones
    local PROVIDER_SCRIPT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/providers/$PROVIDER"
    if [[ -f "$PROVIDER_SCRIPT" ]]; then
      source "$PROVIDER_SCRIPT"
      dns_provider_aws_setup_env
      
      # Check if AWS is properly configured before filtering
      dokku_log_info1 "Testing AWS credentials..."
      if aws sts get-caller-identity >/dev/null 2>&1; then
        dokku_log_info1 "AWS credentials OK - checking hosted zones for new domains..."
        
        for DOMAIN in "${NEW_DOMAINS[@]}"; do
          [[ -z "$DOMAIN" ]] && continue
          
          dokku_log_info1 "Checking domain: $DOMAIN"
          # Check if domain has a hosted zone (disable exit on error for this call)
          local ZONE_ID
          set +e  # Temporarily disable exit on error
          ZONE_ID=$(dns_provider_aws_get_hosted_zone_id "$DOMAIN" 2>/dev/null)
          local ZONE_CHECK_EXIT_CODE=$?
          set -e  # Re-enable exit on error
          
          if [[ $ZONE_CHECK_EXIT_CODE -eq 0 ]] && [[ -n "$ZONE_ID" ]]; then
            VALID_DOMAINS+=("$DOMAIN")
            dokku_log_info1 "✓ $DOMAIN has hosted zone: $ZONE_ID"
          else
            SKIPPED_DOMAINS+=("$DOMAIN")
            dokku_log_info1 "✗ $DOMAIN has no hosted zone"
          fi
          dokku_log_info1 "Finished checking domain: $DOMAIN"
        done
        dokku_log_info1 "Completed hosted zone checks for all domains"
      else
        dokku_log_warn "AWS CLI not configured or credentials invalid"
        dokku_log_info1 "Cannot check hosted zones - adding all new domains"
        dokku_log_info1 "Run 'dokku $PLUGIN_COMMAND_PREFIX:verify' to configure AWS credentials"
        VALID_DOMAINS=("${NEW_DOMAINS[@]}")
      fi
    else
      dokku_log_warn "AWS provider script not found, adding all new domains"
      VALID_DOMAINS=("${NEW_DOMAINS[@]}")
    fi
  else
    # For other providers or no provider configured, add all new domains
    # Other providers can implement their own hosted zone checking logic
    VALID_DOMAINS=("${NEW_DOMAINS[@]}")
  fi
  
  # Report skipped domains
  if [[ ${#SKIPPED_DOMAINS[@]} -gt 0 ]]; then
    dokku_log_warn "Skipping domains without hosted zones:"
    for DOMAIN in "${SKIPPED_DOMAINS[@]}"; do
      dokku_log_info1 "  ❌ $DOMAIN (no hosted zone found)"
    done
    echo
  fi
  
  # Always show status table for all requested domains
  echo
  dns_display_domains_table "$APP" "${NEW_DOMAINS[@]}"
  
  # Check if we have any valid domains left
  if [[ ${#VALID_DOMAINS[@]} -eq 0 ]]; then
    dokku_log_warn "No domains with hosted zones found for app: $APP"
    if [[ ${#SKIPPED_DOMAINS[@]} -gt 0 ]]; then
      dokku_log_info1 "Create hosted zones for these domains in your DNS provider first"
    fi
    return 0
  fi
  
  dokku_log_info2 "Adding domains for app '$APP' to DNS (${#VALID_DOMAINS[@]} domains)"
  
  # Track this app as being added to DNS
  local LINKS_FILE="$PLUGIN_DATA_ROOT/LINKS"
  mkdir -p "$PLUGIN_DATA_ROOT"
  mkdir -p "$PLUGIN_DATA_ROOT/$APP"
  
  # Add app to LINKS file if not already present
  if [[ ! -f "$LINKS_FILE" ]] || ! grep -q "^$APP$" "$LINKS_FILE" 2>/dev/null; then
    echo "$APP" >> "$LINKS_FILE"
    dokku_log_info1 "App '$APP' added to DNS"
  else
    dokku_log_info1 "App '$APP' already in DNS, adding new domains"
  fi
  
  # Add valid domains to the app's domains file
  for DOMAIN in "${VALID_DOMAINS[@]}"; do
    echo "$DOMAIN" >> "$APP_DOMAINS_FILE"
  done
  
  # Remove duplicates from the domains file
  if [[ -f "$APP_DOMAINS_FILE" ]]; then
    sort -u "$APP_DOMAINS_FILE" > "${APP_DOMAINS_FILE}.tmp"
    mv "${APP_DOMAINS_FILE}.tmp" "$APP_DOMAINS_FILE"
  fi
  
  dokku_log_info1 "${#VALID_DOMAINS[@]} domain(s) with hosted zones have been added to DNS"
  dokku_log_info1 "Next step: dokku $PLUGIN_COMMAND_PREFIX:sync $APP"
}

dns_remove_app() {
  local APP="$1"
  local LINKS_FILE="$PLUGIN_DATA_ROOT/LINKS"
  
  dokku_log_info2 "Removing app '$APP' from DNS"
  
  # Check if LINKS file exists
  if [[ ! -f "$LINKS_FILE" ]]; then
    dokku_log_warn "No DNS tracking file found"
    return 0
  fi
  
  # Remove app from LINKS file
  if grep -q "^$APP$" "$LINKS_FILE" 2>/dev/null; then
    # Create a temporary file without this app
    grep -v "^$APP$" "$LINKS_FILE" > "${LINKS_FILE}.tmp" || true
    mv "${LINKS_FILE}.tmp" "$LINKS_FILE"
    
    # Remove the app's domains file
    local APP_DOMAINS_FILE="$PLUGIN_DATA_ROOT/$APP/DOMAINS"
    if [[ -f "$APP_DOMAINS_FILE" ]]; then
      rm -f "$APP_DOMAINS_FILE"
    fi
    
    # Remove the app directory if it's empty
    if [[ -d "$PLUGIN_DATA_ROOT/$APP" ]]; then
      rmdir "$PLUGIN_DATA_ROOT/$APP" 2>/dev/null || true
    fi
    
    dokku_log_info1 "App '$APP' removed from DNS"
    dokku_log_info1 "Note: Existing DNS records were not deleted"
    dokku_log_info1 "To clean up DNS records, run: dokku $PLUGIN_COMMAND_PREFIX:sync $APP (before removing next time)"
  else
    dokku_log_warn "App '$APP' was not found in DNS tracking"
  fi
  
  # Clean up empty LINKS file
  if [[ ! -s "$LINKS_FILE" ]]; then
    rm -f "$LINKS_FILE"
    dokku_log_info1 "No apps remaining in DNS - tracking file cleaned up"
  fi
}

dns_display_domains_table() {
  local APP="$1"
  shift
  local DOMAINS=("$@")
  
  # Get server IP
  local SERVER_IP
  SERVER_IP=$(dns_get_server_ip)
  
  # Get global configuration
  local GLOBAL_CONFIG_ROOT="$PLUGIN_DATA_ROOT"
  local PROVIDER_FILE="$GLOBAL_CONFIG_ROOT/PROVIDER"
  local PROVIDER="None"
  local SYNC_STATUS="Not configured"
  
  if [[ -f "$PROVIDER_FILE" ]]; then
    PROVIDER="$(cat "$PROVIDER_FILE")"
    
    # Check provider status
    local CREDENTIALS_DIR="$GLOBAL_CONFIG_ROOT/credentials"
    if [[ "$PROVIDER" != "None" ]] && [[ -d "$CREDENTIALS_DIR" ]]; then
      case "$PROVIDER" in
        aws)
          if [[ -f "$CREDENTIALS_DIR/AWS_ACCESS_KEY_ID" ]] || aws sts get-caller-identity >/dev/null 2>&1; then
            SYNC_STATUS="Ready"
          else
            SYNC_STATUS="Missing auth"
          fi
          ;;
        cloudflare)
          if [[ -f "$CREDENTIALS_DIR/CLOUDFLARE_API_TOKEN" ]]; then
            SYNC_STATUS="Ready"
          else
            SYNC_STATUS="Missing auth"
          fi
          ;;
        *)
          SYNC_STATUS="Unknown provider"
          ;;
      esac
    fi
  fi
  
  # Load provider functions if available
  if [[ "$PROVIDER" != "None" ]] && [[ "$SYNC_STATUS" == "Ready" ]]; then
    local PROVIDER_SCRIPT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/providers/$PROVIDER"
    if [[ -f "$PROVIDER_SCRIPT" ]]; then
      source "$PROVIDER_SCRIPT"
      if [[ "$PROVIDER" == "aws" ]]; then
        dns_provider_aws_setup_env
      fi
    fi
  fi
  
  echo
  dokku_log_info2 "Domain Status Table for app '$APP':"
  printf "%-30s %-8s %-15s %-15s %s\n" "Domain" "Status" "Enabled" "Provider" "Hosted Zone"
  printf "%-30s %-8s %-15s %-15s %s\n" "------" "------" "-------" "--------" "-----------"
  
  for DOMAIN in "${DOMAINS[@]}"; do
    [[ -z "$DOMAIN" ]] && continue
    
    # Get current DNS resolution
    local CURRENT_IP
    CURRENT_IP=$(dig +short "$DOMAIN" A 2>/dev/null | tail -n1 || echo "")
    
    # Determine DNS status emoji
    local DNS_EMOJI="❌"
    if [[ -n "$CURRENT_IP" ]]; then
      if [[ "$CURRENT_IP" == "$SERVER_IP" ]]; then
        DNS_EMOJI="✅"
      else
        DNS_EMOJI="⚠️"
      fi
    fi
    
    # Try to get hosted zone if provider is AWS and ready
    local HOSTED_ZONE="-"
    local ZONE_ID=""
    if [[ "$PROVIDER" == "aws" ]] && [[ "$SYNC_STATUS" == "Ready" ]]; then
      if declare -f "dns_provider_aws_get_hosted_zone_id" >/dev/null 2>&1; then
        ZONE_ID=$(dns_provider_aws_get_hosted_zone_id "$DOMAIN" 2>/dev/null || echo "")
        if [[ -n "$ZONE_ID" ]]; then
          # Get the zone name from AWS
          local ZONE_NAME
          ZONE_NAME=$(aws route53 get-hosted-zone --id "$ZONE_ID" --query 'HostedZone.Name' --output text 2>/dev/null | sed 's/\.$//g' || echo "$ZONE_ID")
          HOSTED_ZONE="$ZONE_NAME"
        else
          HOSTED_ZONE="Not found"
        fi
      fi
    fi
    
    # Check if domain is enabled - only enable if hosted zone is found
    local ENABLED_STATUS="No"
    if [[ "$PROVIDER" == "aws" ]] && [[ "$SYNC_STATUS" == "Ready" ]]; then
      if [[ -n "$ZONE_ID" ]]; then
        ENABLED_STATUS="Yes"
      else
        ENABLED_STATUS="No (no hosted zone)"
      fi
    elif [[ "$PROVIDER" != "None" ]] && [[ "$SYNC_STATUS" == "Ready" ]]; then
      # For other providers, default to enabled (they can implement their own logic)
      ENABLED_STATUS="Yes"
    else
      ENABLED_STATUS="No (provider not ready)"
    fi
    
    printf "%-30s %-8s %-15s %-15s %s\n" "$DOMAIN" "$DNS_EMOJI" "$ENABLED_STATUS" "$PROVIDER" "$HOSTED_ZONE"
  done
  
  echo
  dokku_log_info2 "Status Legend:"
  dokku_log_info1 "✅ Points to server IP ($SERVER_IP)"
  dokku_log_info1 "⚠️  Points to different IP"
  dokku_log_info1 "❌ No DNS record found"
}